---
description: 
globs: 
alwaysApply: true
---

# Relidler CLI: Context

In my codebase, the main function annotated with `@relidler()` powers a CLI tool called **Relidler**, responsible for building and publishing user projects to the **NPM** or **JSR** registries. Relidler supports two primary project structures:

1. **Regular projects**: Processes the entire `src` directory.
2. **Library projects**: Processes only specific libraries located in `src/libs/libName` directories, with each library contained in its own folder (`libName`).

**Key details:**
- Files within the user's source directories (`src/` or `src/libs/libName/`) use `.ts` extensions, but import paths explicitly include the `.js` extension.
- Distribution structures for publishing:
  - **Regular projects (`dist-jsr` and `dist-npm`)**:
    - Contain `package.json`, `license`, `readme.md`.
    - Include `jsr.json` only for JSR distributions.
    - Include `jsconfig.json` for JSR distributions if the regular project is a CLI.
    - Contain a `bin` folder with the entire content of the `src` directory.
  - **Library projects (`dist-libs/libName/npm` and `dist-libs/libName/jsr`)**:
    - Contain `package.json`, `license`, and `readme.md`.
    - Include `jsr.json` only for JSR distributions.
    - Contain a `bin` folder with the content from the specific library directory (`src/libs/libName`).
- When publishing to registries:
  - **NPM** expects distribution files with `.js` extensions, optionally accompanied by type declaration files (`.d.ts`), based on user preference set in Relidler's config.
  - **JSR** expects distribution files with `.ts` extensions.

Users configure their projects using an optional `@relidler.cfg.ts` file located in their project's root. All configuration fields in this file are optional, with sensible default values defined in `@cfg-default.ts`. You can always learn more about config fields in `@types.ts` file.
